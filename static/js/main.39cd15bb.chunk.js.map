{"version":3,"sources":["Components/react-router-basic-bs/IDBIE/IDBIE1.jsx","Components/react-router-basic-bs/IDBIE/db.js","Components/react-router-basic-bs/pages/Home.js","Components/react-router-basic-bs/pages/About.js","Components/react-router-basic-bs/pages/Help.js","serviceWorker.js","index.js","Components/react-router-basic-bs/App.js"],"names":["progressCallback","totalRows","completedRows","console","log","IDBIE1","db","Dexie","version","stores","foos","bars","on","bulkAdd","id","foo","date","Date","ID","getDB","exportDatabase","a","exportDB","prettyJson","blob","download","error","onDrop","event","stopPropagation","preventDefault","file","dataTransfer","files","Error","name","delete","importDB","getTablesAsync","Promise","all","tables","map","table","count","schema","primKey","src","useState","setTables","updateReport","useEffect","className","onClick","onDragOver","dropEffect","border","colSpan","key","Home","About","Help","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","props","collapseNavMenu","setCollapseNavMenu","basename","process","aria-label","to","exact","aria-hidden","href","target","rel","path","brand","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.39cd15bb.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport './IDBIE1.css';\r\nimport download from 'downloadjs';\r\nimport { importDB, exportDB } from 'dexie-export-import';\r\nimport getDB from './db.js';\r\n\r\nfunction progressCallback({ totalRows, completedRows }) {\r\n    console.log(`Progress: ${completedRows} of ${totalRows} rows completed`);\r\n}\r\n\r\nexport default function IDBIE1() {\r\n    let db = getDB();\r\n\r\n    const exportDatabase = async () => {\r\n        try {\r\n            const blob = await exportDB(db, { prettyJson: true, progressCallback });\r\n            download(blob, \"dexie-export.json\", \"application/json\");\r\n        } catch (error) {\r\n            console.error('' + error);\r\n        }\r\n    };\r\n\r\n    const onDragOver = event => {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        event.dataTransfer.dropEffect = 'copy';\r\n    };\r\n\r\n    const onDrop = async event => {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n\r\n        // Pick the File from the drop event (a File is also a Blob):\r\n        const file = event.dataTransfer.files[0];\r\n        try {\r\n            if (!file) throw new Error(`Only files can be dropped here`);\r\n            console.log(\"Importing \" + file.name);\r\n            await db.delete();\r\n            db = await importDB(file, {\r\n                progressCallback\r\n            });\r\n            console.log(\"Import complete\");\r\n          //  await updateReport();\r\n        } catch (error) {\r\n            console.error('' + error);\r\n        }\r\n    }\r\n\r\n\r\n    const getTablesAsync = async () => await\r\n        Promise.all(db.tables.map(async table => ({\r\n            name: table.name,\r\n            count: await table.count(),\r\n            primKey: table.schema.primKey.src\r\n        })));\r\n\r\n\r\n    const [tables, setTables] = useState([]);\r\n\r\n    const updateReport = async () => {\r\n        setTables(await getTablesAsync());\r\n    };\r\n\r\n    useEffect(() => {\r\n        updateReport();\r\n      //  return () => { db = null; }\r\n    })\r\n\r\n    return < >\r\n        <div className=\"column\">\r\n            <button onClick={exportDatabase}>Click here to export the database</button>\r\n\r\n            <div className=\"dropzone\"\r\n                onDragOver={onDragOver}\r\n                onDrop={onDrop}>\r\n                Drop dexie export JSON file here\r\n            </div>\r\n        </div>\r\n        <div className=\"column\">\r\n            <h3>Database Info</h3>\r\n            <button onClick={updateReport}>Click here to update report</button>\r\n            <table border=\"1\">\r\n                <thead></thead>\r\n                <tbody>\r\n\r\n                    <tr>\r\n                        <th>Database Name</th>\r\n                        <td colSpan=\"2\">${db.name}</td>\r\n                    </tr>\r\n                    {\r\n                        tables.map(table => <tr key={table.name}>\r\n                            <th>Table: {table.name}</th>\r\n                            <td>Primary Key:{table.primKey}</td>\r\n                            <td>Row count: {table.count}</td>\r\n                        </tr>)\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    </>;\r\n}","import Dexie from \"dexie\";\r\nexport default () => {\r\n    let db = new Dexie('exportSample');\r\n    db.version(1).stores({\r\n        foos: 'id',\r\n        bars: 'ID',\r\n    });\r\n    db.on('populate', () => {\r\n        db.foos.bulkAdd([\r\n            {\r\n                id: 1,\r\n                foo: 'foo1',\r\n                date: new Date(),\r\n            }, {\r\n                id: 2,\r\n                foo: 'foo2',\r\n            }\r\n        ]);\r\n        db.bars.bulkAdd([\r\n            {\r\n                ID: 1,\r\n                foo: 'bar1',\r\n                date: new Date(),\r\n            }, {\r\n                ID: 2,\r\n                foo: 'bar2',\r\n            }\r\n        ])\r\n    });\r\n    return db;\r\n}","import React, { Fragment } from \"react\";\r\n\r\nimport IDBIE1 from '../IDBIE/IDBIE1.jsx';\r\nexport default function Home() {\r\n  return <Fragment  >\r\n    <IDBIE1></IDBIE1>\r\n  </Fragment>;\r\n}","import React from \"react\";\r\n\r\nexport default function About() {\r\n  return <h2>О нас</h2>;\r\n}","import React from \"react\";\r\n\r\nexport default function Help() {\r\n  return <h2 >Помощь</h2>;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import './index.css';\r\nimport App from './Components/react-router-basic-bs/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App brand = \"React App\"/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  BrowserRouter,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  NavLink\r\n} from \"react-router-dom\";\r\nimport Home from './pages/Home';\r\nimport About from './pages/About';\r\nimport Help from './pages/Help';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './css/site.css'\r\nimport './css/hamburgers.css'\r\nimport './css/hamburger.css'\r\nexport default function App(props) {\r\n  const [collapseNavMenu, setCollapseNavMenu] = useState(true);\r\n  return <div className=\"app\">\r\n    <BrowserRouter basename={process.env.PUBLIC_URL + '/'}>\r\n      <div className=\"sidebar\">\r\n        <div className=\"top-row pl-4 navbar navbar-dark\" >\r\n\r\n          <button\r\n            aria-label=\"Меню\"\r\n            className={`navbar-toggler hamburger--collapse  ${collapseNavMenu ? \"\" : \"is-active\"} `}\r\n            onClick={() => setCollapseNavMenu(!collapseNavMenu)}>\r\n            <span className=\"hamburger-box\">\r\n              <span className=\"hamburger-inner\" ></span>\r\n            </span>\r\n          </button>\r\n\r\n          <Link to=\"/about\" className=\"navbar-brand\"> О нас</Link>\r\n        </div>\r\n        <nav className={collapseNavMenu ? \"collapse\" : null}>\r\n          <ul className=\"nav flex-column\">\r\n            <li className=\"nav-item px-3\">\r\n              <NavLink to=\"/\" className=\"nav-link\" onClick={() => setCollapseNavMenu(true)} exact>\r\n                <span className=\"oi oi-home\" aria-hidden=\"true\"></span>Домой\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"nav-item px-3\" >\r\n              <NavLink to=\"/about\" className=\"nav-link\" onClick={() => setCollapseNavMenu(true)}>\r\n                <span className=\"oi oi-sun\" aria-hidden=\"true\"></span>О нас\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"nav-item px-3\" >\r\n              <NavLink to=\"/help\" className=\"nav-link\" onClick={() => setCollapseNavMenu(true)}>\r\n                <span className=\"oi oi-question-mark\" aria-hidden=\"true\"></span>Помощь\r\n                </NavLink>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n      <div className=\"main\">\r\n        <div className=\"top-row px-4\">\r\n          <a href=\"https://ru.reactjs.org/\" target=\"_blank\" className=\"ml-md-auto\" rel=\"noopener noreferrer\">About</a>\r\n        </div>\r\n        <div className=\"content px-4\">\r\n          <Switch >\r\n            <Route path=\"/\" exact >\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/about\">\r\n              <About />\r\n            </Route>\r\n            <Route path=\"/help\">\r\n              <Help />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </BrowserRouter>\r\n  </div>;\r\n}\r\n"],"sourceRoot":""}