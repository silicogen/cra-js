{"version":3,"sources":["Components/react-router-basic-bs/pages/Home.js","Components/react-router-basic-bs/pages/About.js","serviceWorker.js","index.js","Components/react-router-basic-bs/App.js"],"names":["Home","className","About","Boolean","window","location","hostname","match","ReactDOM","render","props","useState","collapseNavMenu","setCollapseNavMenu","path","process","onClick","href","brand","to","class","aria-hidden","target","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAEe,SAASA,IACtB,OAAO,wBAAIC,UAAU,aAAd,sBCDM,SAASC,IACtB,OAAO,yD,YCSWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCMD,SAAaC,GAAQ,IAAD,EACaC,oBAAS,GADtB,mBAC1BC,EAD0B,KACTC,EADS,KAEjC,OAAO,yBAAKZ,UAAU,OACpB,kBAAC,IAAD,CAAea,KAAMC,YACnB,yBAAKd,UAAU,WACb,yBAAKA,UAAU,mCACb,4BAAQA,UAAU,iBAAiBe,QAAS,kBAAMH,GAAoBD,KACpE,0BAAMX,UAAU,yBAElB,uBAAGA,UAAU,eAAegB,KAAK,IAAIP,EAAMQ,QAE7C,yBAAKjB,UAAWW,EAAkB,WAAa,MAC7C,6BACE,wBAAIX,UAAU,mBACZ,wBAAIA,UAAU,iBACZ,kBAAC,IAAD,CAAMkB,GAAG,IAAIlB,UAAU,YACrB,0BAAMmB,MAAM,aAAaC,cAAY,SADvC,SAIF,wBAAIpB,UAAU,iBACZ,kBAAC,IAAD,CAAMkB,GAAG,SAASlB,UAAU,YAC1B,0BAAMmB,MAAM,YAAYC,cAAY,SADtC,cAQV,yBAAKpB,UAAU,QACb,yBAAKA,UAAU,gBACb,uBAAGgB,KAAK,0BAA0BK,OAAO,SAASF,MAAM,cAAxD,UAGF,yBAAKnB,UAAU,gBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOa,KAAK,UACV,kBAACZ,EAAD,OAEF,kBAAC,IAAD,CAAOY,KAAK,KACV,kBAACd,EAAD,cD7CE,CAAKkB,MAAQ,cAAeK,SAASC,eAAe,SD6H9D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f439c1a8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Home() {\r\n  return <h2 className=\"homeClass\">Дом</h2>;\r\n}","import React from \"react\";\r\n\r\nexport default function About() {\r\n  return <h2>О нас</h2>;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './Components/react-router-basic-bs/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App brand = \"React App\"/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\r\nimport {\r\n  BrowserRouter,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport Home from './pages/Home';\r\nimport About from './pages/About';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './css/site.css'\r\n\r\nexport default function App(props) {\r\n  const [collapseNavMenu, setCollapseNavMenu] = useState(true);\r\n  return <div className=\"app\">\r\n    <BrowserRouter path={process.env.PUBLIC_URL + '/'}>\r\n      <div className=\"sidebar\">\r\n        <div className=\"top-row pl-4 navbar navbar-dark\" >\r\n          <button className=\"navbar-toggler\" onClick={() => setCollapseNavMenu(!collapseNavMenu)}>\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <a className=\"navbar-brand\" href=\"\">{props.brand}</a>\r\n        </div>\r\n        <div className={collapseNavMenu ? \"collapse\" : null}>\r\n          <nav >\r\n            <ul className=\"nav flex-column\">\r\n              <li className=\"nav-item px-3\">\r\n                <Link to=\"/\" className=\"nav-link\">\r\n                  <span class=\"oi oi-home\" aria-hidden=\"true\"></span>Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item px-3\">\r\n                <Link to=\"/about\" className=\"nav-link\">\r\n                  <span class=\"oi oi-sun\" aria-hidden=\"true\"></span>About\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n      </div>\r\n      <div className=\"main\">\r\n        <div className=\"top-row px-4\">\r\n          <a href=\"https://ru.reactjs.org/\" target=\"_blank\" class=\"ml-md-auto\">About</a>\r\n        </div>\r\n\r\n        <div className=\"content px-4\">\r\n          <Switch >\r\n            <Route path=\"/about\">\r\n              <About />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Home />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </BrowserRouter>\r\n  </div>;\r\n}\r\n"],"sourceRoot":""}